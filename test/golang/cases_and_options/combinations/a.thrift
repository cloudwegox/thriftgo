// Copyright 2022 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated by gen_test.go in github.com/cloudwegox/thriftgo
namespace * tests

typedef bool AliasBool

typedef byte AliasByte

typedef i16 AliasI16

typedef i32 AliasI32

typedef i64 AliasI64

typedef double AliasDouble

typedef string AliasString

typedef binary AliasBinary

typedef Enum AliasEnum

typedef Union AliasUnion

typedef Struct AliasStruct

typedef Exception AliasException

enum Enum {
    Enum1 = 1,
    Enum2,
    Enum3,
}

union Union {
    1: bool uBool
    2: byte uByte
    3: i16 uI16
    4: i32 uI32
    5: i64 uI64
    6: double uDouble
    7: string uString
    8: binary uBinary
    9: Enum uEnum
    10: list<bool> uListBool
    11: list<byte> uListByte
    12: list<i16> uListI16
    13: list<i32> uListI32
    14: list<i64> uListI64
    15: list<double> uListDouble
    16: list<string> uListString
    17: list<binary> uListBinary
    18: list<Enum> uListEnum
    19: set<bool> uSetBool
    20: set<byte> uSetByte
    21: set<i16> uSetI16
    22: set<i32> uSetI32
    23: set<i64> uSetI64
    24: set<double> uSetDouble
    25: set<string> uSetString
    26: set<binary> uSetBinary
    27: set<Enum> uSetEnum
    28: map<bool,byte> uMapBoolByte
    29: map<byte,i16> uMapByteI16
    30: map<i16,i32> uMapI16I32
    31: map<i32,i64> uMapI32I64
    32: map<i64,double> uMapI64Double
    33: map<double,string> uMapDoubleString
    34: map<string,binary> uMapStringBinary
    35: map<binary,Enum> uMapBinaryEnum
    36: map<Enum,bool> uMapEnumBool
}

struct Struct {
    1: bool sBoolDef
    2: required bool sBoolReq
    3: optional bool sBoolOpt
    4: byte sByteDef
    5: required byte sByteReq
    6: optional byte sByteOpt
    7: i16 sI16Def
    8: required i16 sI16Req
    9: optional i16 sI16Opt
    10: i32 sI32Def
    11: required i32 sI32Req
    12: optional i32 sI32Opt
    13: i64 sI64Def
    14: required i64 sI64Req
    15: optional i64 sI64Opt
    16: double sDoubleDef
    17: required double sDoubleReq
    18: optional double sDoubleOpt
    19: string sStringDef
    20: required string sStringReq
    21: optional string sStringOpt
    22: binary sBinaryDef
    23: required binary sBinaryReq
    24: optional binary sBinaryOpt
    25: Enum sEnumDef
    26: required Enum sEnumReq
    27: optional Enum sEnumOpt
    28: list<bool> sListBoolDef
    29: required list<bool> sListBoolReq
    30: optional list<bool> sListBoolOpt
    31: list<byte> sListByteDef
    32: required list<byte> sListByteReq
    33: optional list<byte> sListByteOpt
    34: list<i16> sListI16Def
    35: required list<i16> sListI16Req
    36: optional list<i16> sListI16Opt
    37: list<i32> sListI32Def
    38: required list<i32> sListI32Req
    39: optional list<i32> sListI32Opt
    40: list<i64> sListI64Def
    41: required list<i64> sListI64Req
    42: optional list<i64> sListI64Opt
    43: list<double> sListDoubleDef
    44: required list<double> sListDoubleReq
    45: optional list<double> sListDoubleOpt
    46: list<string> sListStringDef
    47: required list<string> sListStringReq
    48: optional list<string> sListStringOpt
    49: list<binary> sListBinaryDef
    50: required list<binary> sListBinaryReq
    51: optional list<binary> sListBinaryOpt
    52: list<Enum> sListEnumDef
    53: required list<Enum> sListEnumReq
    54: optional list<Enum> sListEnumOpt
    55: set<bool> sSetBoolDef
    56: required set<bool> sSetBoolReq
    57: optional set<bool> sSetBoolOpt
    58: set<byte> sSetByteDef
    59: required set<byte> sSetByteReq
    60: optional set<byte> sSetByteOpt
    61: set<i16> sSetI16Def
    62: required set<i16> sSetI16Req
    63: optional set<i16> sSetI16Opt
    64: set<i32> sSetI32Def
    65: required set<i32> sSetI32Req
    66: optional set<i32> sSetI32Opt
    67: set<i64> sSetI64Def
    68: required set<i64> sSetI64Req
    69: optional set<i64> sSetI64Opt
    70: set<double> sSetDoubleDef
    71: required set<double> sSetDoubleReq
    72: optional set<double> sSetDoubleOpt
    73: set<string> sSetStringDef
    74: required set<string> sSetStringReq
    75: optional set<string> sSetStringOpt
    76: set<binary> sSetBinaryDef
    77: required set<binary> sSetBinaryReq
    78: optional set<binary> sSetBinaryOpt
    79: set<Enum> sSetEnumDef
    80: required set<Enum> sSetEnumReq
    81: optional set<Enum> sSetEnumOpt
    82: map<bool,byte> sMapBoolByteDef
    83: required map<bool,byte> sMapBoolByteReq
    84: optional map<bool,byte> sMapBoolByteOpt
    85: map<byte,i16> sMapByteI16Def
    86: required map<byte,i16> sMapByteI16Req
    87: optional map<byte,i16> sMapByteI16Opt
    88: map<i16,i32> sMapI16I32Def
    89: required map<i16,i32> sMapI16I32Req
    90: optional map<i16,i32> sMapI16I32Opt
    91: map<i32,i64> sMapI32I64Def
    92: required map<i32,i64> sMapI32I64Req
    93: optional map<i32,i64> sMapI32I64Opt
    94: map<i64,double> sMapI64DoubleDef
    95: required map<i64,double> sMapI64DoubleReq
    96: optional map<i64,double> sMapI64DoubleOpt
    97: map<double,string> sMapDoubleStringDef
    98: required map<double,string> sMapDoubleStringReq
    99: optional map<double,string> sMapDoubleStringOpt
    100: map<string,binary> sMapStringBinaryDef
    101: required map<string,binary> sMapStringBinaryReq
    102: optional map<string,binary> sMapStringBinaryOpt
    103: map<binary,Enum> sMapBinaryEnumDef
    104: required map<binary,Enum> sMapBinaryEnumReq
    105: optional map<binary,Enum> sMapBinaryEnumOpt
    106: map<Enum,bool> sMapEnumBoolDef
    107: required map<Enum,bool> sMapEnumBoolReq
    108: optional map<Enum,bool> sMapEnumBoolOpt
}

exception Exception {
    1: bool eBoolDef
    2: required bool eBoolReq
    3: optional bool eBoolOpt
    4: byte eByteDef
    5: required byte eByteReq
    6: optional byte eByteOpt
    7: i16 eI16Def
    8: required i16 eI16Req
    9: optional i16 eI16Opt
    10: i32 eI32Def
    11: required i32 eI32Req
    12: optional i32 eI32Opt
    13: i64 eI64Def
    14: required i64 eI64Req
    15: optional i64 eI64Opt
    16: double eDoubleDef
    17: required double eDoubleReq
    18: optional double eDoubleOpt
    19: string eStringDef
    20: required string eStringReq
    21: optional string eStringOpt
    22: binary eBinaryDef
    23: required binary eBinaryReq
    24: optional binary eBinaryOpt
    25: Enum eEnumDef
    26: required Enum eEnumReq
    27: optional Enum eEnumOpt
    28: list<bool> eListBoolDef
    29: required list<bool> eListBoolReq
    30: optional list<bool> eListBoolOpt
    31: list<byte> eListByteDef
    32: required list<byte> eListByteReq
    33: optional list<byte> eListByteOpt
    34: list<i16> eListI16Def
    35: required list<i16> eListI16Req
    36: optional list<i16> eListI16Opt
    37: list<i32> eListI32Def
    38: required list<i32> eListI32Req
    39: optional list<i32> eListI32Opt
    40: list<i64> eListI64Def
    41: required list<i64> eListI64Req
    42: optional list<i64> eListI64Opt
    43: list<double> eListDoubleDef
    44: required list<double> eListDoubleReq
    45: optional list<double> eListDoubleOpt
    46: list<string> eListStringDef
    47: required list<string> eListStringReq
    48: optional list<string> eListStringOpt
    49: list<binary> eListBinaryDef
    50: required list<binary> eListBinaryReq
    51: optional list<binary> eListBinaryOpt
    52: list<Enum> eListEnumDef
    53: required list<Enum> eListEnumReq
    54: optional list<Enum> eListEnumOpt
    55: set<bool> eSetBoolDef
    56: required set<bool> eSetBoolReq
    57: optional set<bool> eSetBoolOpt
    58: set<byte> eSetByteDef
    59: required set<byte> eSetByteReq
    60: optional set<byte> eSetByteOpt
    61: set<i16> eSetI16Def
    62: required set<i16> eSetI16Req
    63: optional set<i16> eSetI16Opt
    64: set<i32> eSetI32Def
    65: required set<i32> eSetI32Req
    66: optional set<i32> eSetI32Opt
    67: set<i64> eSetI64Def
    68: required set<i64> eSetI64Req
    69: optional set<i64> eSetI64Opt
    70: set<double> eSetDoubleDef
    71: required set<double> eSetDoubleReq
    72: optional set<double> eSetDoubleOpt
    73: set<string> eSetStringDef
    74: required set<string> eSetStringReq
    75: optional set<string> eSetStringOpt
    76: set<binary> eSetBinaryDef
    77: required set<binary> eSetBinaryReq
    78: optional set<binary> eSetBinaryOpt
    79: set<Enum> eSetEnumDef
    80: required set<Enum> eSetEnumReq
    81: optional set<Enum> eSetEnumOpt
    82: map<bool,byte> eMapBoolByteDef
    83: required map<bool,byte> eMapBoolByteReq
    84: optional map<bool,byte> eMapBoolByteOpt
    85: map<byte,i16> eMapByteI16Def
    86: required map<byte,i16> eMapByteI16Req
    87: optional map<byte,i16> eMapByteI16Opt
    88: map<i16,i32> eMapI16I32Def
    89: required map<i16,i32> eMapI16I32Req
    90: optional map<i16,i32> eMapI16I32Opt
    91: map<i32,i64> eMapI32I64Def
    92: required map<i32,i64> eMapI32I64Req
    93: optional map<i32,i64> eMapI32I64Opt
    94: map<i64,double> eMapI64DoubleDef
    95: required map<i64,double> eMapI64DoubleReq
    96: optional map<i64,double> eMapI64DoubleOpt
    97: map<double,string> eMapDoubleStringDef
    98: required map<double,string> eMapDoubleStringReq
    99: optional map<double,string> eMapDoubleStringOpt
    100: map<string,binary> eMapStringBinaryDef
    101: required map<string,binary> eMapStringBinaryReq
    102: optional map<string,binary> eMapStringBinaryOpt
    103: map<binary,Enum> eMapBinaryEnumDef
    104: required map<binary,Enum> eMapBinaryEnumReq
    105: optional map<binary,Enum> eMapBinaryEnumOpt
    106: map<Enum,bool> eMapEnumBoolDef
    107: required map<Enum,bool> eMapEnumBoolReq
    108: optional map<Enum,bool> eMapEnumBoolOpt
}

struct Complex {
    1: bool xBoolDef
    2: required bool xBoolReq
    3: optional bool xBoolOpt
    4: byte xByteDef
    5: required byte xByteReq
    6: optional byte xByteOpt
    7: i16 xI16Def
    8: required i16 xI16Req
    9: optional i16 xI16Opt
    10: i32 xI32Def
    11: required i32 xI32Req
    12: optional i32 xI32Opt
    13: i64 xI64Def
    14: required i64 xI64Req
    15: optional i64 xI64Opt
    16: double xDoubleDef
    17: required double xDoubleReq
    18: optional double xDoubleOpt
    19: string xStringDef
    20: required string xStringReq
    21: optional string xStringOpt
    22: binary xBinaryDef
    23: required binary xBinaryReq
    24: optional binary xBinaryOpt
    25: Enum xEnumDef
    26: required Enum xEnumReq
    27: optional Enum xEnumOpt
    28: Union xUnionDef
    29: required Union xUnionReq
    30: optional Union xUnionOpt
    31: Struct xStructDef
    32: required Struct xStructReq
    33: optional Struct xStructOpt
    34: Exception xExceptionDef
    35: required Exception xExceptionReq
    36: optional Exception xExceptionOpt
    37: AliasBool xAliasBoolDef
    38: required AliasBool xAliasBoolReq
    39: optional AliasBool xAliasBoolOpt
    40: AliasByte xAliasByteDef
    41: required AliasByte xAliasByteReq
    42: optional AliasByte xAliasByteOpt
    43: AliasI16 xAliasI16Def
    44: required AliasI16 xAliasI16Req
    45: optional AliasI16 xAliasI16Opt
    46: AliasI32 xAliasI32Def
    47: required AliasI32 xAliasI32Req
    48: optional AliasI32 xAliasI32Opt
    49: AliasI64 xAliasI64Def
    50: required AliasI64 xAliasI64Req
    51: optional AliasI64 xAliasI64Opt
    52: AliasDouble xAliasDoubleDef
    53: required AliasDouble xAliasDoubleReq
    54: optional AliasDouble xAliasDoubleOpt
    55: AliasString xAliasStringDef
    56: required AliasString xAliasStringReq
    57: optional AliasString xAliasStringOpt
    58: AliasBinary xAliasBinaryDef
    59: required AliasBinary xAliasBinaryReq
    60: optional AliasBinary xAliasBinaryOpt
    61: AliasEnum xAliasEnumDef
    62: required AliasEnum xAliasEnumReq
    63: optional AliasEnum xAliasEnumOpt
    64: AliasUnion xAliasUnionDef
    65: required AliasUnion xAliasUnionReq
    66: optional AliasUnion xAliasUnionOpt
    67: AliasStruct xAliasStructDef
    68: required AliasStruct xAliasStructReq
    69: optional AliasStruct xAliasStructOpt
    70: AliasException xAliasExceptionDef
    71: required AliasException xAliasExceptionReq
    72: optional AliasException xAliasExceptionOpt
    73: list<bool> xListBoolDef
    74: required list<bool> xListBoolReq
    75: optional list<bool> xListBoolOpt
    76: list<byte> xListByteDef
    77: required list<byte> xListByteReq
    78: optional list<byte> xListByteOpt
    79: list<i16> xListI16Def
    80: required list<i16> xListI16Req
    81: optional list<i16> xListI16Opt
    82: list<i32> xListI32Def
    83: required list<i32> xListI32Req
    84: optional list<i32> xListI32Opt
    85: list<i64> xListI64Def
    86: required list<i64> xListI64Req
    87: optional list<i64> xListI64Opt
    88: list<double> xListDoubleDef
    89: required list<double> xListDoubleReq
    90: optional list<double> xListDoubleOpt
    91: list<string> xListStringDef
    92: required list<string> xListStringReq
    93: optional list<string> xListStringOpt
    94: list<binary> xListBinaryDef
    95: required list<binary> xListBinaryReq
    96: optional list<binary> xListBinaryOpt
    97: list<Enum> xListEnumDef
    98: required list<Enum> xListEnumReq
    99: optional list<Enum> xListEnumOpt
    100: list<Union> xListUnionDef
    101: required list<Union> xListUnionReq
    102: optional list<Union> xListUnionOpt
    103: list<Struct> xListStructDef
    104: required list<Struct> xListStructReq
    105: optional list<Struct> xListStructOpt
    106: list<Exception> xListExceptionDef
    107: required list<Exception> xListExceptionReq
    108: optional list<Exception> xListExceptionOpt
    109: list<AliasBool> xListAliasBoolDef
    110: required list<AliasBool> xListAliasBoolReq
    111: optional list<AliasBool> xListAliasBoolOpt
    112: list<AliasByte> xListAliasByteDef
    113: required list<AliasByte> xListAliasByteReq
    114: optional list<AliasByte> xListAliasByteOpt
    115: list<AliasI16> xListAliasI16Def
    116: required list<AliasI16> xListAliasI16Req
    117: optional list<AliasI16> xListAliasI16Opt
    118: list<AliasI32> xListAliasI32Def
    119: required list<AliasI32> xListAliasI32Req
    120: optional list<AliasI32> xListAliasI32Opt
    121: list<AliasI64> xListAliasI64Def
    122: required list<AliasI64> xListAliasI64Req
    123: optional list<AliasI64> xListAliasI64Opt
    124: list<AliasDouble> xListAliasDoubleDef
    125: required list<AliasDouble> xListAliasDoubleReq
    126: optional list<AliasDouble> xListAliasDoubleOpt
    127: list<AliasString> xListAliasStringDef
    128: required list<AliasString> xListAliasStringReq
    129: optional list<AliasString> xListAliasStringOpt
    130: list<AliasBinary> xListAliasBinaryDef
    131: required list<AliasBinary> xListAliasBinaryReq
    132: optional list<AliasBinary> xListAliasBinaryOpt
    133: list<AliasEnum> xListAliasEnumDef
    134: required list<AliasEnum> xListAliasEnumReq
    135: optional list<AliasEnum> xListAliasEnumOpt
    136: list<AliasUnion> xListAliasUnionDef
    137: required list<AliasUnion> xListAliasUnionReq
    138: optional list<AliasUnion> xListAliasUnionOpt
    139: list<AliasStruct> xListAliasStructDef
    140: required list<AliasStruct> xListAliasStructReq
    141: optional list<AliasStruct> xListAliasStructOpt
    142: list<AliasException> xListAliasExceptionDef
    143: required list<AliasException> xListAliasExceptionReq
    144: optional list<AliasException> xListAliasExceptionOpt
    145: set<bool> xSetBoolDef
    146: required set<bool> xSetBoolReq
    147: optional set<bool> xSetBoolOpt
    148: set<byte> xSetByteDef
    149: required set<byte> xSetByteReq
    150: optional set<byte> xSetByteOpt
    151: set<i16> xSetI16Def
    152: required set<i16> xSetI16Req
    153: optional set<i16> xSetI16Opt
    154: set<i32> xSetI32Def
    155: required set<i32> xSetI32Req
    156: optional set<i32> xSetI32Opt
    157: set<i64> xSetI64Def
    158: required set<i64> xSetI64Req
    159: optional set<i64> xSetI64Opt
    160: set<double> xSetDoubleDef
    161: required set<double> xSetDoubleReq
    162: optional set<double> xSetDoubleOpt
    163: set<string> xSetStringDef
    164: required set<string> xSetStringReq
    165: optional set<string> xSetStringOpt
    166: set<binary> xSetBinaryDef
    167: required set<binary> xSetBinaryReq
    168: optional set<binary> xSetBinaryOpt
    169: set<Enum> xSetEnumDef
    170: required set<Enum> xSetEnumReq
    171: optional set<Enum> xSetEnumOpt
    172: set<Union> xSetUnionDef
    173: required set<Union> xSetUnionReq
    174: optional set<Union> xSetUnionOpt
    175: set<Struct> xSetStructDef
    176: required set<Struct> xSetStructReq
    177: optional set<Struct> xSetStructOpt
    178: set<Exception> xSetExceptionDef
    179: required set<Exception> xSetExceptionReq
    180: optional set<Exception> xSetExceptionOpt
    181: set<AliasBool> xSetAliasBoolDef
    182: required set<AliasBool> xSetAliasBoolReq
    183: optional set<AliasBool> xSetAliasBoolOpt
    184: set<AliasByte> xSetAliasByteDef
    185: required set<AliasByte> xSetAliasByteReq
    186: optional set<AliasByte> xSetAliasByteOpt
    187: set<AliasI16> xSetAliasI16Def
    188: required set<AliasI16> xSetAliasI16Req
    189: optional set<AliasI16> xSetAliasI16Opt
    190: set<AliasI32> xSetAliasI32Def
    191: required set<AliasI32> xSetAliasI32Req
    192: optional set<AliasI32> xSetAliasI32Opt
    193: set<AliasI64> xSetAliasI64Def
    194: required set<AliasI64> xSetAliasI64Req
    195: optional set<AliasI64> xSetAliasI64Opt
    196: set<AliasDouble> xSetAliasDoubleDef
    197: required set<AliasDouble> xSetAliasDoubleReq
    198: optional set<AliasDouble> xSetAliasDoubleOpt
    199: set<AliasString> xSetAliasStringDef
    200: required set<AliasString> xSetAliasStringReq
    201: optional set<AliasString> xSetAliasStringOpt
    202: set<AliasBinary> xSetAliasBinaryDef
    203: required set<AliasBinary> xSetAliasBinaryReq
    204: optional set<AliasBinary> xSetAliasBinaryOpt
    205: set<AliasEnum> xSetAliasEnumDef
    206: required set<AliasEnum> xSetAliasEnumReq
    207: optional set<AliasEnum> xSetAliasEnumOpt
    208: set<AliasUnion> xSetAliasUnionDef
    209: required set<AliasUnion> xSetAliasUnionReq
    210: optional set<AliasUnion> xSetAliasUnionOpt
    211: set<AliasStruct> xSetAliasStructDef
    212: required set<AliasStruct> xSetAliasStructReq
    213: optional set<AliasStruct> xSetAliasStructOpt
    214: set<AliasException> xSetAliasExceptionDef
    215: required set<AliasException> xSetAliasExceptionReq
    216: optional set<AliasException> xSetAliasExceptionOpt
    217: map<bool,byte> xMapBoolByteDef
    218: required map<bool,byte> xMapBoolByteReq
    219: optional map<bool,byte> xMapBoolByteOpt
    220: map<byte,i16> xMapByteI16Def
    221: required map<byte,i16> xMapByteI16Req
    222: optional map<byte,i16> xMapByteI16Opt
    223: map<i16,i32> xMapI16I32Def
    224: required map<i16,i32> xMapI16I32Req
    225: optional map<i16,i32> xMapI16I32Opt
    226: map<i32,i64> xMapI32I64Def
    227: required map<i32,i64> xMapI32I64Req
    228: optional map<i32,i64> xMapI32I64Opt
    229: map<i64,double> xMapI64DoubleDef
    230: required map<i64,double> xMapI64DoubleReq
    231: optional map<i64,double> xMapI64DoubleOpt
    232: map<double,string> xMapDoubleStringDef
    233: required map<double,string> xMapDoubleStringReq
    234: optional map<double,string> xMapDoubleStringOpt
    235: map<string,binary> xMapStringBinaryDef
    236: required map<string,binary> xMapStringBinaryReq
    237: optional map<string,binary> xMapStringBinaryOpt
    238: map<binary,Enum> xMapBinaryEnumDef
    239: required map<binary,Enum> xMapBinaryEnumReq
    240: optional map<binary,Enum> xMapBinaryEnumOpt
    241: map<Enum,Union> xMapEnumUnionDef
    242: required map<Enum,Union> xMapEnumUnionReq
    243: optional map<Enum,Union> xMapEnumUnionOpt
    244: map<Union,Struct> xMapUnionStructDef
    245: required map<Union,Struct> xMapUnionStructReq
    246: optional map<Union,Struct> xMapUnionStructOpt
    247: map<Struct,Exception> xMapStructExceptionDef
    248: required map<Struct,Exception> xMapStructExceptionReq
    249: optional map<Struct,Exception> xMapStructExceptionOpt
    250: map<Exception,AliasBool> xMapExceptionAliasBoolDef
    251: required map<Exception,AliasBool> xMapExceptionAliasBoolReq
    252: optional map<Exception,AliasBool> xMapExceptionAliasBoolOpt
    253: map<AliasBool,AliasByte> xMapAliasBoolAliasByteDef
    254: required map<AliasBool,AliasByte> xMapAliasBoolAliasByteReq
    255: optional map<AliasBool,AliasByte> xMapAliasBoolAliasByteOpt
    256: map<AliasByte,AliasI16> xMapAliasByteAliasI16Def
    257: required map<AliasByte,AliasI16> xMapAliasByteAliasI16Req
    258: optional map<AliasByte,AliasI16> xMapAliasByteAliasI16Opt
    259: map<AliasI16,AliasI32> xMapAliasI16AliasI32Def
    260: required map<AliasI16,AliasI32> xMapAliasI16AliasI32Req
    261: optional map<AliasI16,AliasI32> xMapAliasI16AliasI32Opt
    262: map<AliasI32,AliasI64> xMapAliasI32AliasI64Def
    263: required map<AliasI32,AliasI64> xMapAliasI32AliasI64Req
    264: optional map<AliasI32,AliasI64> xMapAliasI32AliasI64Opt
    265: map<AliasI64,AliasDouble> xMapAliasI64AliasDoubleDef
    266: required map<AliasI64,AliasDouble> xMapAliasI64AliasDoubleReq
    267: optional map<AliasI64,AliasDouble> xMapAliasI64AliasDoubleOpt
    268: map<AliasDouble,AliasString> xMapAliasDoubleAliasStringDef
    269: required map<AliasDouble,AliasString> xMapAliasDoubleAliasStringReq
    270: optional map<AliasDouble,AliasString> xMapAliasDoubleAliasStringOpt
    271: map<AliasString,AliasBinary> xMapAliasStringAliasBinaryDef
    272: required map<AliasString,AliasBinary> xMapAliasStringAliasBinaryReq
    273: optional map<AliasString,AliasBinary> xMapAliasStringAliasBinaryOpt
    274: map<AliasBinary,AliasEnum> xMapAliasBinaryAliasEnumDef
    275: required map<AliasBinary,AliasEnum> xMapAliasBinaryAliasEnumReq
    276: optional map<AliasBinary,AliasEnum> xMapAliasBinaryAliasEnumOpt
    277: map<AliasEnum,AliasUnion> xMapAliasEnumAliasUnionDef
    278: required map<AliasEnum,AliasUnion> xMapAliasEnumAliasUnionReq
    279: optional map<AliasEnum,AliasUnion> xMapAliasEnumAliasUnionOpt
    280: map<AliasUnion,AliasStruct> xMapAliasUnionAliasStructDef
    281: required map<AliasUnion,AliasStruct> xMapAliasUnionAliasStructReq
    282: optional map<AliasUnion,AliasStruct> xMapAliasUnionAliasStructOpt
    283: map<AliasStruct,AliasException> xMapAliasStructAliasExceptionDef
    284: required map<AliasStruct,AliasException> xMapAliasStructAliasExceptionReq
    285: optional map<AliasStruct,AliasException> xMapAliasStructAliasExceptionOpt
    286: map<AliasException,bool> xMapAliasExceptionBoolDef
    287: required map<AliasException,bool> xMapAliasExceptionBoolReq
    288: optional map<AliasException,bool> xMapAliasExceptionBoolOpt
    289: list<list<bool>> xListListBoolDef
    290: required list<list<bool>> xListListBoolReq
    291: optional list<list<bool>> xListListBoolOpt
    292: list<list<byte>> xListListByteDef
    293: required list<list<byte>> xListListByteReq
    294: optional list<list<byte>> xListListByteOpt
    295: list<list<i16>> xListListI16Def
    296: required list<list<i16>> xListListI16Req
    297: optional list<list<i16>> xListListI16Opt
    298: list<list<i32>> xListListI32Def
    299: required list<list<i32>> xListListI32Req
    300: optional list<list<i32>> xListListI32Opt
    301: list<list<i64>> xListListI64Def
    302: required list<list<i64>> xListListI64Req
    303: optional list<list<i64>> xListListI64Opt
    304: list<list<double>> xListListDoubleDef
    305: required list<list<double>> xListListDoubleReq
    306: optional list<list<double>> xListListDoubleOpt
    307: list<list<string>> xListListStringDef
    308: required list<list<string>> xListListStringReq
    309: optional list<list<string>> xListListStringOpt
    310: list<list<binary>> xListListBinaryDef
    311: required list<list<binary>> xListListBinaryReq
    312: optional list<list<binary>> xListListBinaryOpt
    313: list<list<Enum>> xListListEnumDef
    314: required list<list<Enum>> xListListEnumReq
    315: optional list<list<Enum>> xListListEnumOpt
    316: list<list<Union>> xListListUnionDef
    317: required list<list<Union>> xListListUnionReq
    318: optional list<list<Union>> xListListUnionOpt
    319: list<list<Struct>> xListListStructDef
    320: required list<list<Struct>> xListListStructReq
    321: optional list<list<Struct>> xListListStructOpt
    322: list<list<Exception>> xListListExceptionDef
    323: required list<list<Exception>> xListListExceptionReq
    324: optional list<list<Exception>> xListListExceptionOpt
    325: list<list<AliasBool>> xListListAliasBoolDef
    326: required list<list<AliasBool>> xListListAliasBoolReq
    327: optional list<list<AliasBool>> xListListAliasBoolOpt
    328: list<list<AliasByte>> xListListAliasByteDef
    329: required list<list<AliasByte>> xListListAliasByteReq
    330: optional list<list<AliasByte>> xListListAliasByteOpt
    331: list<list<AliasI16>> xListListAliasI16Def
    332: required list<list<AliasI16>> xListListAliasI16Req
    333: optional list<list<AliasI16>> xListListAliasI16Opt
    334: list<list<AliasI32>> xListListAliasI32Def
    335: required list<list<AliasI32>> xListListAliasI32Req
    336: optional list<list<AliasI32>> xListListAliasI32Opt
    337: list<list<AliasI64>> xListListAliasI64Def
    338: required list<list<AliasI64>> xListListAliasI64Req
    339: optional list<list<AliasI64>> xListListAliasI64Opt
    340: list<list<AliasDouble>> xListListAliasDoubleDef
    341: required list<list<AliasDouble>> xListListAliasDoubleReq
    342: optional list<list<AliasDouble>> xListListAliasDoubleOpt
    343: list<list<AliasString>> xListListAliasStringDef
    344: required list<list<AliasString>> xListListAliasStringReq
    345: optional list<list<AliasString>> xListListAliasStringOpt
    346: list<list<AliasBinary>> xListListAliasBinaryDef
    347: required list<list<AliasBinary>> xListListAliasBinaryReq
    348: optional list<list<AliasBinary>> xListListAliasBinaryOpt
    349: list<list<AliasEnum>> xListListAliasEnumDef
    350: required list<list<AliasEnum>> xListListAliasEnumReq
    351: optional list<list<AliasEnum>> xListListAliasEnumOpt
    352: list<list<AliasUnion>> xListListAliasUnionDef
    353: required list<list<AliasUnion>> xListListAliasUnionReq
    354: optional list<list<AliasUnion>> xListListAliasUnionOpt
    355: list<list<AliasStruct>> xListListAliasStructDef
    356: required list<list<AliasStruct>> xListListAliasStructReq
    357: optional list<list<AliasStruct>> xListListAliasStructOpt
    358: list<list<AliasException>> xListListAliasExceptionDef
    359: required list<list<AliasException>> xListListAliasExceptionReq
    360: optional list<list<AliasException>> xListListAliasExceptionOpt
    361: list<set<bool>> xListSetBoolDef
    362: required list<set<bool>> xListSetBoolReq
    363: optional list<set<bool>> xListSetBoolOpt
    364: list<set<byte>> xListSetByteDef
    365: required list<set<byte>> xListSetByteReq
    366: optional list<set<byte>> xListSetByteOpt
    367: list<set<i16>> xListSetI16Def
    368: required list<set<i16>> xListSetI16Req
    369: optional list<set<i16>> xListSetI16Opt
    370: list<set<i32>> xListSetI32Def
    371: required list<set<i32>> xListSetI32Req
    372: optional list<set<i32>> xListSetI32Opt
    373: list<set<i64>> xListSetI64Def
    374: required list<set<i64>> xListSetI64Req
    375: optional list<set<i64>> xListSetI64Opt
    376: list<set<double>> xListSetDoubleDef
    377: required list<set<double>> xListSetDoubleReq
    378: optional list<set<double>> xListSetDoubleOpt
    379: list<set<string>> xListSetStringDef
    380: required list<set<string>> xListSetStringReq
    381: optional list<set<string>> xListSetStringOpt
    382: list<set<binary>> xListSetBinaryDef
    383: required list<set<binary>> xListSetBinaryReq
    384: optional list<set<binary>> xListSetBinaryOpt
    385: list<set<Enum>> xListSetEnumDef
    386: required list<set<Enum>> xListSetEnumReq
    387: optional list<set<Enum>> xListSetEnumOpt
    388: list<set<Union>> xListSetUnionDef
    389: required list<set<Union>> xListSetUnionReq
    390: optional list<set<Union>> xListSetUnionOpt
    391: list<set<Struct>> xListSetStructDef
    392: required list<set<Struct>> xListSetStructReq
    393: optional list<set<Struct>> xListSetStructOpt
    394: list<set<Exception>> xListSetExceptionDef
    395: required list<set<Exception>> xListSetExceptionReq
    396: optional list<set<Exception>> xListSetExceptionOpt
    397: list<set<AliasBool>> xListSetAliasBoolDef
    398: required list<set<AliasBool>> xListSetAliasBoolReq
    399: optional list<set<AliasBool>> xListSetAliasBoolOpt
    400: list<set<AliasByte>> xListSetAliasByteDef
    401: required list<set<AliasByte>> xListSetAliasByteReq
    402: optional list<set<AliasByte>> xListSetAliasByteOpt
    403: list<set<AliasI16>> xListSetAliasI16Def
    404: required list<set<AliasI16>> xListSetAliasI16Req
    405: optional list<set<AliasI16>> xListSetAliasI16Opt
    406: list<set<AliasI32>> xListSetAliasI32Def
    407: required list<set<AliasI32>> xListSetAliasI32Req
    408: optional list<set<AliasI32>> xListSetAliasI32Opt
    409: list<set<AliasI64>> xListSetAliasI64Def
    410: required list<set<AliasI64>> xListSetAliasI64Req
    411: optional list<set<AliasI64>> xListSetAliasI64Opt
    412: list<set<AliasDouble>> xListSetAliasDoubleDef
    413: required list<set<AliasDouble>> xListSetAliasDoubleReq
    414: optional list<set<AliasDouble>> xListSetAliasDoubleOpt
    415: list<set<AliasString>> xListSetAliasStringDef
    416: required list<set<AliasString>> xListSetAliasStringReq
    417: optional list<set<AliasString>> xListSetAliasStringOpt
    418: list<set<AliasBinary>> xListSetAliasBinaryDef
    419: required list<set<AliasBinary>> xListSetAliasBinaryReq
    420: optional list<set<AliasBinary>> xListSetAliasBinaryOpt
    421: list<set<AliasEnum>> xListSetAliasEnumDef
    422: required list<set<AliasEnum>> xListSetAliasEnumReq
    423: optional list<set<AliasEnum>> xListSetAliasEnumOpt
    424: list<set<AliasUnion>> xListSetAliasUnionDef
    425: required list<set<AliasUnion>> xListSetAliasUnionReq
    426: optional list<set<AliasUnion>> xListSetAliasUnionOpt
    427: list<set<AliasStruct>> xListSetAliasStructDef
    428: required list<set<AliasStruct>> xListSetAliasStructReq
    429: optional list<set<AliasStruct>> xListSetAliasStructOpt
    430: list<set<AliasException>> xListSetAliasExceptionDef
    431: required list<set<AliasException>> xListSetAliasExceptionReq
    432: optional list<set<AliasException>> xListSetAliasExceptionOpt
    433: list<map<bool,byte>> xListMapBoolByteDef
    434: required list<map<bool,byte>> xListMapBoolByteReq
    435: optional list<map<bool,byte>> xListMapBoolByteOpt
    436: list<map<byte,i16>> xListMapByteI16Def
    437: required list<map<byte,i16>> xListMapByteI16Req
    438: optional list<map<byte,i16>> xListMapByteI16Opt
    439: list<map<i16,i32>> xListMapI16I32Def
    440: required list<map<i16,i32>> xListMapI16I32Req
    441: optional list<map<i16,i32>> xListMapI16I32Opt
    442: list<map<i32,i64>> xListMapI32I64Def
    443: required list<map<i32,i64>> xListMapI32I64Req
    444: optional list<map<i32,i64>> xListMapI32I64Opt
    445: list<map<i64,double>> xListMapI64DoubleDef
    446: required list<map<i64,double>> xListMapI64DoubleReq
    447: optional list<map<i64,double>> xListMapI64DoubleOpt
    448: list<map<double,string>> xListMapDoubleStringDef
    449: required list<map<double,string>> xListMapDoubleStringReq
    450: optional list<map<double,string>> xListMapDoubleStringOpt
    451: list<map<string,binary>> xListMapStringBinaryDef
    452: required list<map<string,binary>> xListMapStringBinaryReq
    453: optional list<map<string,binary>> xListMapStringBinaryOpt
    454: list<map<binary,Enum>> xListMapBinaryEnumDef
    455: required list<map<binary,Enum>> xListMapBinaryEnumReq
    456: optional list<map<binary,Enum>> xListMapBinaryEnumOpt
    457: list<map<Enum,Union>> xListMapEnumUnionDef
    458: required list<map<Enum,Union>> xListMapEnumUnionReq
    459: optional list<map<Enum,Union>> xListMapEnumUnionOpt
    460: list<map<Union,Struct>> xListMapUnionStructDef
    461: required list<map<Union,Struct>> xListMapUnionStructReq
    462: optional list<map<Union,Struct>> xListMapUnionStructOpt
    463: list<map<Struct,Exception>> xListMapStructExceptionDef
    464: required list<map<Struct,Exception>> xListMapStructExceptionReq
    465: optional list<map<Struct,Exception>> xListMapStructExceptionOpt
    466: list<map<Exception,AliasBool>> xListMapExceptionAliasBoolDef
    467: required list<map<Exception,AliasBool>> xListMapExceptionAliasBoolReq
    468: optional list<map<Exception,AliasBool>> xListMapExceptionAliasBoolOpt
    469: list<map<AliasBool,AliasByte>> xListMapAliasBoolAliasByteDef
    470: required list<map<AliasBool,AliasByte>> xListMapAliasBoolAliasByteReq
    471: optional list<map<AliasBool,AliasByte>> xListMapAliasBoolAliasByteOpt
    472: list<map<AliasByte,AliasI16>> xListMapAliasByteAliasI16Def
    473: required list<map<AliasByte,AliasI16>> xListMapAliasByteAliasI16Req
    474: optional list<map<AliasByte,AliasI16>> xListMapAliasByteAliasI16Opt
    475: list<map<AliasI16,AliasI32>> xListMapAliasI16AliasI32Def
    476: required list<map<AliasI16,AliasI32>> xListMapAliasI16AliasI32Req
    477: optional list<map<AliasI16,AliasI32>> xListMapAliasI16AliasI32Opt
    478: list<map<AliasI32,AliasI64>> xListMapAliasI32AliasI64Def
    479: required list<map<AliasI32,AliasI64>> xListMapAliasI32AliasI64Req
    480: optional list<map<AliasI32,AliasI64>> xListMapAliasI32AliasI64Opt
    481: list<map<AliasI64,AliasDouble>> xListMapAliasI64AliasDoubleDef
    482: required list<map<AliasI64,AliasDouble>> xListMapAliasI64AliasDoubleReq
    483: optional list<map<AliasI64,AliasDouble>> xListMapAliasI64AliasDoubleOpt
    484: list<map<AliasDouble,AliasString>> xListMapAliasDoubleAliasStringDef
    485: required list<map<AliasDouble,AliasString>> xListMapAliasDoubleAliasStringReq
    486: optional list<map<AliasDouble,AliasString>> xListMapAliasDoubleAliasStringOpt
    487: list<map<AliasString,AliasBinary>> xListMapAliasStringAliasBinaryDef
    488: required list<map<AliasString,AliasBinary>> xListMapAliasStringAliasBinaryReq
    489: optional list<map<AliasString,AliasBinary>> xListMapAliasStringAliasBinaryOpt
    490: list<map<AliasBinary,AliasEnum>> xListMapAliasBinaryAliasEnumDef
    491: required list<map<AliasBinary,AliasEnum>> xListMapAliasBinaryAliasEnumReq
    492: optional list<map<AliasBinary,AliasEnum>> xListMapAliasBinaryAliasEnumOpt
    493: list<map<AliasEnum,AliasUnion>> xListMapAliasEnumAliasUnionDef
    494: required list<map<AliasEnum,AliasUnion>> xListMapAliasEnumAliasUnionReq
    495: optional list<map<AliasEnum,AliasUnion>> xListMapAliasEnumAliasUnionOpt
    496: list<map<AliasUnion,AliasStruct>> xListMapAliasUnionAliasStructDef
    497: required list<map<AliasUnion,AliasStruct>> xListMapAliasUnionAliasStructReq
    498: optional list<map<AliasUnion,AliasStruct>> xListMapAliasUnionAliasStructOpt
    499: list<map<AliasStruct,AliasException>> xListMapAliasStructAliasExceptionDef
    500: required list<map<AliasStruct,AliasException>> xListMapAliasStructAliasExceptionReq
    501: optional list<map<AliasStruct,AliasException>> xListMapAliasStructAliasExceptionOpt
    502: list<map<AliasException,bool>> xListMapAliasExceptionBoolDef
    503: required list<map<AliasException,bool>> xListMapAliasExceptionBoolReq
    504: optional list<map<AliasException,bool>> xListMapAliasExceptionBoolOpt
    505: set<list<bool>> xSetListBoolDef
    506: required set<list<bool>> xSetListBoolReq
    507: optional set<list<bool>> xSetListBoolOpt
    508: set<list<byte>> xSetListByteDef
    509: required set<list<byte>> xSetListByteReq
    510: optional set<list<byte>> xSetListByteOpt
    511: set<list<i16>> xSetListI16Def
    512: required set<list<i16>> xSetListI16Req
    513: optional set<list<i16>> xSetListI16Opt
    514: set<list<i32>> xSetListI32Def
    515: required set<list<i32>> xSetListI32Req
    516: optional set<list<i32>> xSetListI32Opt
    517: set<list<i64>> xSetListI64Def
    518: required set<list<i64>> xSetListI64Req
    519: optional set<list<i64>> xSetListI64Opt
    520: set<list<double>> xSetListDoubleDef
    521: required set<list<double>> xSetListDoubleReq
    522: optional set<list<double>> xSetListDoubleOpt
    523: set<list<string>> xSetListStringDef
    524: required set<list<string>> xSetListStringReq
    525: optional set<list<string>> xSetListStringOpt
    526: set<list<binary>> xSetListBinaryDef
    527: required set<list<binary>> xSetListBinaryReq
    528: optional set<list<binary>> xSetListBinaryOpt
    529: set<list<Enum>> xSetListEnumDef
    530: required set<list<Enum>> xSetListEnumReq
    531: optional set<list<Enum>> xSetListEnumOpt
    532: set<list<Union>> xSetListUnionDef
    533: required set<list<Union>> xSetListUnionReq
    534: optional set<list<Union>> xSetListUnionOpt
    535: set<list<Struct>> xSetListStructDef
    536: required set<list<Struct>> xSetListStructReq
    537: optional set<list<Struct>> xSetListStructOpt
    538: set<list<Exception>> xSetListExceptionDef
    539: required set<list<Exception>> xSetListExceptionReq
    540: optional set<list<Exception>> xSetListExceptionOpt
    541: set<list<AliasBool>> xSetListAliasBoolDef
    542: required set<list<AliasBool>> xSetListAliasBoolReq
    543: optional set<list<AliasBool>> xSetListAliasBoolOpt
    544: set<list<AliasByte>> xSetListAliasByteDef
    545: required set<list<AliasByte>> xSetListAliasByteReq
    546: optional set<list<AliasByte>> xSetListAliasByteOpt
    547: set<list<AliasI16>> xSetListAliasI16Def
    548: required set<list<AliasI16>> xSetListAliasI16Req
    549: optional set<list<AliasI16>> xSetListAliasI16Opt
    550: set<list<AliasI32>> xSetListAliasI32Def
    551: required set<list<AliasI32>> xSetListAliasI32Req
    552: optional set<list<AliasI32>> xSetListAliasI32Opt
    553: set<list<AliasI64>> xSetListAliasI64Def
    554: required set<list<AliasI64>> xSetListAliasI64Req
    555: optional set<list<AliasI64>> xSetListAliasI64Opt
    556: set<list<AliasDouble>> xSetListAliasDoubleDef
    557: required set<list<AliasDouble>> xSetListAliasDoubleReq
    558: optional set<list<AliasDouble>> xSetListAliasDoubleOpt
    559: set<list<AliasString>> xSetListAliasStringDef
    560: required set<list<AliasString>> xSetListAliasStringReq
    561: optional set<list<AliasString>> xSetListAliasStringOpt
    562: set<list<AliasBinary>> xSetListAliasBinaryDef
    563: required set<list<AliasBinary>> xSetListAliasBinaryReq
    564: optional set<list<AliasBinary>> xSetListAliasBinaryOpt
    565: set<list<AliasEnum>> xSetListAliasEnumDef
    566: required set<list<AliasEnum>> xSetListAliasEnumReq
    567: optional set<list<AliasEnum>> xSetListAliasEnumOpt
    568: set<list<AliasUnion>> xSetListAliasUnionDef
    569: required set<list<AliasUnion>> xSetListAliasUnionReq
    570: optional set<list<AliasUnion>> xSetListAliasUnionOpt
    571: set<list<AliasStruct>> xSetListAliasStructDef
    572: required set<list<AliasStruct>> xSetListAliasStructReq
    573: optional set<list<AliasStruct>> xSetListAliasStructOpt
    574: set<list<AliasException>> xSetListAliasExceptionDef
    575: required set<list<AliasException>> xSetListAliasExceptionReq
    576: optional set<list<AliasException>> xSetListAliasExceptionOpt
    577: set<set<bool>> xSetSetBoolDef
    578: required set<set<bool>> xSetSetBoolReq
    579: optional set<set<bool>> xSetSetBoolOpt
    580: set<set<byte>> xSetSetByteDef
    581: required set<set<byte>> xSetSetByteReq
    582: optional set<set<byte>> xSetSetByteOpt
    583: set<set<i16>> xSetSetI16Def
    584: required set<set<i16>> xSetSetI16Req
    585: optional set<set<i16>> xSetSetI16Opt
    586: set<set<i32>> xSetSetI32Def
    587: required set<set<i32>> xSetSetI32Req
    588: optional set<set<i32>> xSetSetI32Opt
    589: set<set<i64>> xSetSetI64Def
    590: required set<set<i64>> xSetSetI64Req
    591: optional set<set<i64>> xSetSetI64Opt
    592: set<set<double>> xSetSetDoubleDef
    593: required set<set<double>> xSetSetDoubleReq
    594: optional set<set<double>> xSetSetDoubleOpt
    595: set<set<string>> xSetSetStringDef
    596: required set<set<string>> xSetSetStringReq
    597: optional set<set<string>> xSetSetStringOpt
    598: set<set<binary>> xSetSetBinaryDef
    599: required set<set<binary>> xSetSetBinaryReq
    600: optional set<set<binary>> xSetSetBinaryOpt
    601: set<set<Enum>> xSetSetEnumDef
    602: required set<set<Enum>> xSetSetEnumReq
    603: optional set<set<Enum>> xSetSetEnumOpt
    604: set<set<Union>> xSetSetUnionDef
    605: required set<set<Union>> xSetSetUnionReq
    606: optional set<set<Union>> xSetSetUnionOpt
    607: set<set<Struct>> xSetSetStructDef
    608: required set<set<Struct>> xSetSetStructReq
    609: optional set<set<Struct>> xSetSetStructOpt
    610: set<set<Exception>> xSetSetExceptionDef
    611: required set<set<Exception>> xSetSetExceptionReq
    612: optional set<set<Exception>> xSetSetExceptionOpt
    613: set<set<AliasBool>> xSetSetAliasBoolDef
    614: required set<set<AliasBool>> xSetSetAliasBoolReq
    615: optional set<set<AliasBool>> xSetSetAliasBoolOpt
    616: set<set<AliasByte>> xSetSetAliasByteDef
    617: required set<set<AliasByte>> xSetSetAliasByteReq
    618: optional set<set<AliasByte>> xSetSetAliasByteOpt
    619: set<set<AliasI16>> xSetSetAliasI16Def
    620: required set<set<AliasI16>> xSetSetAliasI16Req
    621: optional set<set<AliasI16>> xSetSetAliasI16Opt
    622: set<set<AliasI32>> xSetSetAliasI32Def
    623: required set<set<AliasI32>> xSetSetAliasI32Req
    624: optional set<set<AliasI32>> xSetSetAliasI32Opt
    625: set<set<AliasI64>> xSetSetAliasI64Def
    626: required set<set<AliasI64>> xSetSetAliasI64Req
    627: optional set<set<AliasI64>> xSetSetAliasI64Opt
    628: set<set<AliasDouble>> xSetSetAliasDoubleDef
    629: required set<set<AliasDouble>> xSetSetAliasDoubleReq
    630: optional set<set<AliasDouble>> xSetSetAliasDoubleOpt
    631: set<set<AliasString>> xSetSetAliasStringDef
    632: required set<set<AliasString>> xSetSetAliasStringReq
    633: optional set<set<AliasString>> xSetSetAliasStringOpt
    634: set<set<AliasBinary>> xSetSetAliasBinaryDef
    635: required set<set<AliasBinary>> xSetSetAliasBinaryReq
    636: optional set<set<AliasBinary>> xSetSetAliasBinaryOpt
    637: set<set<AliasEnum>> xSetSetAliasEnumDef
    638: required set<set<AliasEnum>> xSetSetAliasEnumReq
    639: optional set<set<AliasEnum>> xSetSetAliasEnumOpt
    640: set<set<AliasUnion>> xSetSetAliasUnionDef
    641: required set<set<AliasUnion>> xSetSetAliasUnionReq
    642: optional set<set<AliasUnion>> xSetSetAliasUnionOpt
    643: set<set<AliasStruct>> xSetSetAliasStructDef
    644: required set<set<AliasStruct>> xSetSetAliasStructReq
    645: optional set<set<AliasStruct>> xSetSetAliasStructOpt
    646: set<set<AliasException>> xSetSetAliasExceptionDef
    647: required set<set<AliasException>> xSetSetAliasExceptionReq
    648: optional set<set<AliasException>> xSetSetAliasExceptionOpt
    649: set<map<bool,byte>> xSetMapBoolByteDef
    650: required set<map<bool,byte>> xSetMapBoolByteReq
    651: optional set<map<bool,byte>> xSetMapBoolByteOpt
    652: set<map<byte,i16>> xSetMapByteI16Def
    653: required set<map<byte,i16>> xSetMapByteI16Req
    654: optional set<map<byte,i16>> xSetMapByteI16Opt
    655: set<map<i16,i32>> xSetMapI16I32Def
    656: required set<map<i16,i32>> xSetMapI16I32Req
    657: optional set<map<i16,i32>> xSetMapI16I32Opt
    658: set<map<i32,i64>> xSetMapI32I64Def
    659: required set<map<i32,i64>> xSetMapI32I64Req
    660: optional set<map<i32,i64>> xSetMapI32I64Opt
    661: set<map<i64,double>> xSetMapI64DoubleDef
    662: required set<map<i64,double>> xSetMapI64DoubleReq
    663: optional set<map<i64,double>> xSetMapI64DoubleOpt
    664: set<map<double,string>> xSetMapDoubleStringDef
    665: required set<map<double,string>> xSetMapDoubleStringReq
    666: optional set<map<double,string>> xSetMapDoubleStringOpt
    667: set<map<string,binary>> xSetMapStringBinaryDef
    668: required set<map<string,binary>> xSetMapStringBinaryReq
    669: optional set<map<string,binary>> xSetMapStringBinaryOpt
    670: set<map<binary,Enum>> xSetMapBinaryEnumDef
    671: required set<map<binary,Enum>> xSetMapBinaryEnumReq
    672: optional set<map<binary,Enum>> xSetMapBinaryEnumOpt
    673: set<map<Enum,Union>> xSetMapEnumUnionDef
    674: required set<map<Enum,Union>> xSetMapEnumUnionReq
    675: optional set<map<Enum,Union>> xSetMapEnumUnionOpt
    676: set<map<Union,Struct>> xSetMapUnionStructDef
    677: required set<map<Union,Struct>> xSetMapUnionStructReq
    678: optional set<map<Union,Struct>> xSetMapUnionStructOpt
    679: set<map<Struct,Exception>> xSetMapStructExceptionDef
    680: required set<map<Struct,Exception>> xSetMapStructExceptionReq
    681: optional set<map<Struct,Exception>> xSetMapStructExceptionOpt
    682: set<map<Exception,AliasBool>> xSetMapExceptionAliasBoolDef
    683: required set<map<Exception,AliasBool>> xSetMapExceptionAliasBoolReq
    684: optional set<map<Exception,AliasBool>> xSetMapExceptionAliasBoolOpt
    685: set<map<AliasBool,AliasByte>> xSetMapAliasBoolAliasByteDef
    686: required set<map<AliasBool,AliasByte>> xSetMapAliasBoolAliasByteReq
    687: optional set<map<AliasBool,AliasByte>> xSetMapAliasBoolAliasByteOpt
    688: set<map<AliasByte,AliasI16>> xSetMapAliasByteAliasI16Def
    689: required set<map<AliasByte,AliasI16>> xSetMapAliasByteAliasI16Req
    690: optional set<map<AliasByte,AliasI16>> xSetMapAliasByteAliasI16Opt
    691: set<map<AliasI16,AliasI32>> xSetMapAliasI16AliasI32Def
    692: required set<map<AliasI16,AliasI32>> xSetMapAliasI16AliasI32Req
    693: optional set<map<AliasI16,AliasI32>> xSetMapAliasI16AliasI32Opt
    694: set<map<AliasI32,AliasI64>> xSetMapAliasI32AliasI64Def
    695: required set<map<AliasI32,AliasI64>> xSetMapAliasI32AliasI64Req
    696: optional set<map<AliasI32,AliasI64>> xSetMapAliasI32AliasI64Opt
    697: set<map<AliasI64,AliasDouble>> xSetMapAliasI64AliasDoubleDef
    698: required set<map<AliasI64,AliasDouble>> xSetMapAliasI64AliasDoubleReq
    699: optional set<map<AliasI64,AliasDouble>> xSetMapAliasI64AliasDoubleOpt
    700: set<map<AliasDouble,AliasString>> xSetMapAliasDoubleAliasStringDef
    701: required set<map<AliasDouble,AliasString>> xSetMapAliasDoubleAliasStringReq
    702: optional set<map<AliasDouble,AliasString>> xSetMapAliasDoubleAliasStringOpt
    703: set<map<AliasString,AliasBinary>> xSetMapAliasStringAliasBinaryDef
    704: required set<map<AliasString,AliasBinary>> xSetMapAliasStringAliasBinaryReq
    705: optional set<map<AliasString,AliasBinary>> xSetMapAliasStringAliasBinaryOpt
    706: set<map<AliasBinary,AliasEnum>> xSetMapAliasBinaryAliasEnumDef
    707: required set<map<AliasBinary,AliasEnum>> xSetMapAliasBinaryAliasEnumReq
    708: optional set<map<AliasBinary,AliasEnum>> xSetMapAliasBinaryAliasEnumOpt
    709: set<map<AliasEnum,AliasUnion>> xSetMapAliasEnumAliasUnionDef
    710: required set<map<AliasEnum,AliasUnion>> xSetMapAliasEnumAliasUnionReq
    711: optional set<map<AliasEnum,AliasUnion>> xSetMapAliasEnumAliasUnionOpt
    712: set<map<AliasUnion,AliasStruct>> xSetMapAliasUnionAliasStructDef
    713: required set<map<AliasUnion,AliasStruct>> xSetMapAliasUnionAliasStructReq
    714: optional set<map<AliasUnion,AliasStruct>> xSetMapAliasUnionAliasStructOpt
    715: set<map<AliasStruct,AliasException>> xSetMapAliasStructAliasExceptionDef
    716: required set<map<AliasStruct,AliasException>> xSetMapAliasStructAliasExceptionReq
    717: optional set<map<AliasStruct,AliasException>> xSetMapAliasStructAliasExceptionOpt
    718: set<map<AliasException,bool>> xSetMapAliasExceptionBoolDef
    719: required set<map<AliasException,bool>> xSetMapAliasExceptionBoolReq
    720: optional set<map<AliasException,bool>> xSetMapAliasExceptionBoolOpt
    721: map<bool,list<byte>> xMapBoolListByteDef
    722: required map<bool,list<byte>> xMapBoolListByteReq
    723: optional map<bool,list<byte>> xMapBoolListByteOpt
    724: map<bool,list<i16>> xMapBoolListI16Def
    725: required map<bool,list<i16>> xMapBoolListI16Req
    726: optional map<bool,list<i16>> xMapBoolListI16Opt
    727: map<bool,list<i32>> xMapBoolListI32Def
    728: required map<bool,list<i32>> xMapBoolListI32Req
    729: optional map<bool,list<i32>> xMapBoolListI32Opt
    730: map<bool,list<i64>> xMapBoolListI64Def
    731: required map<bool,list<i64>> xMapBoolListI64Req
    732: optional map<bool,list<i64>> xMapBoolListI64Opt
    733: map<bool,list<double>> xMapBoolListDoubleDef
    734: required map<bool,list<double>> xMapBoolListDoubleReq
    735: optional map<bool,list<double>> xMapBoolListDoubleOpt
    736: map<bool,list<string>> xMapBoolListStringDef
    737: required map<bool,list<string>> xMapBoolListStringReq
    738: optional map<bool,list<string>> xMapBoolListStringOpt
    739: map<bool,list<binary>> xMapBoolListBinaryDef
    740: required map<bool,list<binary>> xMapBoolListBinaryReq
    741: optional map<bool,list<binary>> xMapBoolListBinaryOpt
    742: map<bool,list<Enum>> xMapBoolListEnumDef
    743: required map<bool,list<Enum>> xMapBoolListEnumReq
    744: optional map<bool,list<Enum>> xMapBoolListEnumOpt
    745: map<bool,list<Union>> xMapBoolListUnionDef
    746: required map<bool,list<Union>> xMapBoolListUnionReq
    747: optional map<bool,list<Union>> xMapBoolListUnionOpt
    748: map<bool,list<Struct>> xMapBoolListStructDef
    749: required map<bool,list<Struct>> xMapBoolListStructReq
    750: optional map<bool,list<Struct>> xMapBoolListStructOpt
    751: map<bool,list<Exception>> xMapBoolListExceptionDef
    752: required map<bool,list<Exception>> xMapBoolListExceptionReq
    753: optional map<bool,list<Exception>> xMapBoolListExceptionOpt
    754: map<bool,list<AliasBool>> xMapBoolListAliasBoolDef
    755: required map<bool,list<AliasBool>> xMapBoolListAliasBoolReq
    756: optional map<bool,list<AliasBool>> xMapBoolListAliasBoolOpt
    757: map<bool,list<AliasByte>> xMapBoolListAliasByteDef
    758: required map<bool,list<AliasByte>> xMapBoolListAliasByteReq
    759: optional map<bool,list<AliasByte>> xMapBoolListAliasByteOpt
    760: map<bool,list<AliasI16>> xMapBoolListAliasI16Def
    761: required map<bool,list<AliasI16>> xMapBoolListAliasI16Req
    762: optional map<bool,list<AliasI16>> xMapBoolListAliasI16Opt
    763: map<bool,list<AliasI32>> xMapBoolListAliasI32Def
    764: required map<bool,list<AliasI32>> xMapBoolListAliasI32Req
    765: optional map<bool,list<AliasI32>> xMapBoolListAliasI32Opt
    766: map<bool,list<AliasI64>> xMapBoolListAliasI64Def
    767: required map<bool,list<AliasI64>> xMapBoolListAliasI64Req
    768: optional map<bool,list<AliasI64>> xMapBoolListAliasI64Opt
    769: map<bool,list<AliasDouble>> xMapBoolListAliasDoubleDef
    770: required map<bool,list<AliasDouble>> xMapBoolListAliasDoubleReq
    771: optional map<bool,list<AliasDouble>> xMapBoolListAliasDoubleOpt
    772: map<bool,list<AliasString>> xMapBoolListAliasStringDef
    773: required map<bool,list<AliasString>> xMapBoolListAliasStringReq
    774: optional map<bool,list<AliasString>> xMapBoolListAliasStringOpt
    775: map<bool,list<AliasBinary>> xMapBoolListAliasBinaryDef
    776: required map<bool,list<AliasBinary>> xMapBoolListAliasBinaryReq
    777: optional map<bool,list<AliasBinary>> xMapBoolListAliasBinaryOpt
    778: map<bool,list<AliasEnum>> xMapBoolListAliasEnumDef
    779: required map<bool,list<AliasEnum>> xMapBoolListAliasEnumReq
    780: optional map<bool,list<AliasEnum>> xMapBoolListAliasEnumOpt
    781: map<bool,list<AliasUnion>> xMapBoolListAliasUnionDef
    782: required map<bool,list<AliasUnion>> xMapBoolListAliasUnionReq
    783: optional map<bool,list<AliasUnion>> xMapBoolListAliasUnionOpt
    784: map<bool,list<AliasStruct>> xMapBoolListAliasStructDef
    785: required map<bool,list<AliasStruct>> xMapBoolListAliasStructReq
    786: optional map<bool,list<AliasStruct>> xMapBoolListAliasStructOpt
    787: map<bool,list<AliasException>> xMapBoolListAliasExceptionDef
    788: required map<bool,list<AliasException>> xMapBoolListAliasExceptionReq
    789: optional map<bool,list<AliasException>> xMapBoolListAliasExceptionOpt
    790: map<bool,set<bool>> xMapBoolSetBoolDef
    791: required map<bool,set<bool>> xMapBoolSetBoolReq
    792: optional map<bool,set<bool>> xMapBoolSetBoolOpt
    793: map<bool,set<byte>> xMapBoolSetByteDef
    794: required map<bool,set<byte>> xMapBoolSetByteReq
    795: optional map<bool,set<byte>> xMapBoolSetByteOpt
    796: map<bool,set<i16>> xMapBoolSetI16Def
    797: required map<bool,set<i16>> xMapBoolSetI16Req
    798: optional map<bool,set<i16>> xMapBoolSetI16Opt
    799: map<bool,set<i32>> xMapBoolSetI32Def
    800: required map<bool,set<i32>> xMapBoolSetI32Req
    801: optional map<bool,set<i32>> xMapBoolSetI32Opt
    802: map<bool,set<i64>> xMapBoolSetI64Def
    803: required map<bool,set<i64>> xMapBoolSetI64Req
    804: optional map<bool,set<i64>> xMapBoolSetI64Opt
    805: map<bool,set<double>> xMapBoolSetDoubleDef
    806: required map<bool,set<double>> xMapBoolSetDoubleReq
    807: optional map<bool,set<double>> xMapBoolSetDoubleOpt
    808: map<bool,set<string>> xMapBoolSetStringDef
    809: required map<bool,set<string>> xMapBoolSetStringReq
    810: optional map<bool,set<string>> xMapBoolSetStringOpt
    811: map<bool,set<binary>> xMapBoolSetBinaryDef
    812: required map<bool,set<binary>> xMapBoolSetBinaryReq
    813: optional map<bool,set<binary>> xMapBoolSetBinaryOpt
    814: map<bool,set<Enum>> xMapBoolSetEnumDef
    815: required map<bool,set<Enum>> xMapBoolSetEnumReq
    816: optional map<bool,set<Enum>> xMapBoolSetEnumOpt
    817: map<bool,set<Union>> xMapBoolSetUnionDef
    818: required map<bool,set<Union>> xMapBoolSetUnionReq
    819: optional map<bool,set<Union>> xMapBoolSetUnionOpt
    820: map<bool,set<Struct>> xMapBoolSetStructDef
    821: required map<bool,set<Struct>> xMapBoolSetStructReq
    822: optional map<bool,set<Struct>> xMapBoolSetStructOpt
    823: map<bool,set<Exception>> xMapBoolSetExceptionDef
    824: required map<bool,set<Exception>> xMapBoolSetExceptionReq
    825: optional map<bool,set<Exception>> xMapBoolSetExceptionOpt
    826: map<bool,set<AliasBool>> xMapBoolSetAliasBoolDef
    827: required map<bool,set<AliasBool>> xMapBoolSetAliasBoolReq
    828: optional map<bool,set<AliasBool>> xMapBoolSetAliasBoolOpt
    829: map<bool,set<AliasByte>> xMapBoolSetAliasByteDef
    830: required map<bool,set<AliasByte>> xMapBoolSetAliasByteReq
    831: optional map<bool,set<AliasByte>> xMapBoolSetAliasByteOpt
    832: map<bool,set<AliasI16>> xMapBoolSetAliasI16Def
    833: required map<bool,set<AliasI16>> xMapBoolSetAliasI16Req
    834: optional map<bool,set<AliasI16>> xMapBoolSetAliasI16Opt
    835: map<bool,set<AliasI32>> xMapBoolSetAliasI32Def
    836: required map<bool,set<AliasI32>> xMapBoolSetAliasI32Req
    837: optional map<bool,set<AliasI32>> xMapBoolSetAliasI32Opt
    838: map<bool,set<AliasI64>> xMapBoolSetAliasI64Def
    839: required map<bool,set<AliasI64>> xMapBoolSetAliasI64Req
    840: optional map<bool,set<AliasI64>> xMapBoolSetAliasI64Opt
    841: map<bool,set<AliasDouble>> xMapBoolSetAliasDoubleDef
    842: required map<bool,set<AliasDouble>> xMapBoolSetAliasDoubleReq
    843: optional map<bool,set<AliasDouble>> xMapBoolSetAliasDoubleOpt
    844: map<bool,set<AliasString>> xMapBoolSetAliasStringDef
    845: required map<bool,set<AliasString>> xMapBoolSetAliasStringReq
    846: optional map<bool,set<AliasString>> xMapBoolSetAliasStringOpt
    847: map<bool,set<AliasBinary>> xMapBoolSetAliasBinaryDef
    848: required map<bool,set<AliasBinary>> xMapBoolSetAliasBinaryReq
    849: optional map<bool,set<AliasBinary>> xMapBoolSetAliasBinaryOpt
    850: map<bool,set<AliasEnum>> xMapBoolSetAliasEnumDef
    851: required map<bool,set<AliasEnum>> xMapBoolSetAliasEnumReq
    852: optional map<bool,set<AliasEnum>> xMapBoolSetAliasEnumOpt
    853: map<bool,set<AliasUnion>> xMapBoolSetAliasUnionDef
    854: required map<bool,set<AliasUnion>> xMapBoolSetAliasUnionReq
    855: optional map<bool,set<AliasUnion>> xMapBoolSetAliasUnionOpt
    856: map<bool,set<AliasStruct>> xMapBoolSetAliasStructDef
    857: required map<bool,set<AliasStruct>> xMapBoolSetAliasStructReq
    858: optional map<bool,set<AliasStruct>> xMapBoolSetAliasStructOpt
    859: map<bool,set<AliasException>> xMapBoolSetAliasExceptionDef
    860: required map<bool,set<AliasException>> xMapBoolSetAliasExceptionReq
    861: optional map<bool,set<AliasException>> xMapBoolSetAliasExceptionOpt
    862: map<bool,map<bool,byte>> xMapBoolMapBoolByteDef
    863: required map<bool,map<bool,byte>> xMapBoolMapBoolByteReq
    864: optional map<bool,map<bool,byte>> xMapBoolMapBoolByteOpt
    865: map<bool,map<byte,i16>> xMapBoolMapByteI16Def
    866: required map<bool,map<byte,i16>> xMapBoolMapByteI16Req
    867: optional map<bool,map<byte,i16>> xMapBoolMapByteI16Opt
    868: map<bool,map<i16,i32>> xMapBoolMapI16I32Def
    869: required map<bool,map<i16,i32>> xMapBoolMapI16I32Req
    870: optional map<bool,map<i16,i32>> xMapBoolMapI16I32Opt
    871: map<bool,map<i32,i64>> xMapBoolMapI32I64Def
    872: required map<bool,map<i32,i64>> xMapBoolMapI32I64Req
    873: optional map<bool,map<i32,i64>> xMapBoolMapI32I64Opt
    874: map<bool,map<i64,double>> xMapBoolMapI64DoubleDef
    875: required map<bool,map<i64,double>> xMapBoolMapI64DoubleReq
    876: optional map<bool,map<i64,double>> xMapBoolMapI64DoubleOpt
    877: map<bool,map<double,string>> xMapBoolMapDoubleStringDef
    878: required map<bool,map<double,string>> xMapBoolMapDoubleStringReq
    879: optional map<bool,map<double,string>> xMapBoolMapDoubleStringOpt
    880: map<bool,map<string,binary>> xMapBoolMapStringBinaryDef
    881: required map<bool,map<string,binary>> xMapBoolMapStringBinaryReq
    882: optional map<bool,map<string,binary>> xMapBoolMapStringBinaryOpt
    883: map<bool,map<binary,Enum>> xMapBoolMapBinaryEnumDef
    884: required map<bool,map<binary,Enum>> xMapBoolMapBinaryEnumReq
    885: optional map<bool,map<binary,Enum>> xMapBoolMapBinaryEnumOpt
    886: map<bool,map<Enum,Union>> xMapBoolMapEnumUnionDef
    887: required map<bool,map<Enum,Union>> xMapBoolMapEnumUnionReq
    888: optional map<bool,map<Enum,Union>> xMapBoolMapEnumUnionOpt
    889: map<bool,map<Union,Struct>> xMapBoolMapUnionStructDef
    890: required map<bool,map<Union,Struct>> xMapBoolMapUnionStructReq
    891: optional map<bool,map<Union,Struct>> xMapBoolMapUnionStructOpt
    892: map<bool,map<Struct,Exception>> xMapBoolMapStructExceptionDef
    893: required map<bool,map<Struct,Exception>> xMapBoolMapStructExceptionReq
    894: optional map<bool,map<Struct,Exception>> xMapBoolMapStructExceptionOpt
    895: map<bool,map<Exception,AliasBool>> xMapBoolMapExceptionAliasBoolDef
    896: required map<bool,map<Exception,AliasBool>> xMapBoolMapExceptionAliasBoolReq
    897: optional map<bool,map<Exception,AliasBool>> xMapBoolMapExceptionAliasBoolOpt
    898: map<bool,map<AliasBool,AliasByte>> xMapBoolMapAliasBoolAliasByteDef
    899: required map<bool,map<AliasBool,AliasByte>> xMapBoolMapAliasBoolAliasByteReq
    900: optional map<bool,map<AliasBool,AliasByte>> xMapBoolMapAliasBoolAliasByteOpt
    901: map<bool,map<AliasByte,AliasI16>> xMapBoolMapAliasByteAliasI16Def
    902: required map<bool,map<AliasByte,AliasI16>> xMapBoolMapAliasByteAliasI16Req
    903: optional map<bool,map<AliasByte,AliasI16>> xMapBoolMapAliasByteAliasI16Opt
    904: map<bool,map<AliasI16,AliasI32>> xMapBoolMapAliasI16AliasI32Def
    905: required map<bool,map<AliasI16,AliasI32>> xMapBoolMapAliasI16AliasI32Req
    906: optional map<bool,map<AliasI16,AliasI32>> xMapBoolMapAliasI16AliasI32Opt
    907: map<bool,map<AliasI32,AliasI64>> xMapBoolMapAliasI32AliasI64Def
    908: required map<bool,map<AliasI32,AliasI64>> xMapBoolMapAliasI32AliasI64Req
    909: optional map<bool,map<AliasI32,AliasI64>> xMapBoolMapAliasI32AliasI64Opt
    910: map<bool,map<AliasI64,AliasDouble>> xMapBoolMapAliasI64AliasDoubleDef
    911: required map<bool,map<AliasI64,AliasDouble>> xMapBoolMapAliasI64AliasDoubleReq
    912: optional map<bool,map<AliasI64,AliasDouble>> xMapBoolMapAliasI64AliasDoubleOpt
    913: map<bool,map<AliasDouble,AliasString>> xMapBoolMapAliasDoubleAliasStringDef
    914: required map<bool,map<AliasDouble,AliasString>> xMapBoolMapAliasDoubleAliasStringReq
    915: optional map<bool,map<AliasDouble,AliasString>> xMapBoolMapAliasDoubleAliasStringOpt
    916: map<bool,map<AliasString,AliasBinary>> xMapBoolMapAliasStringAliasBinaryDef
    917: required map<bool,map<AliasString,AliasBinary>> xMapBoolMapAliasStringAliasBinaryReq
    918: optional map<bool,map<AliasString,AliasBinary>> xMapBoolMapAliasStringAliasBinaryOpt
    919: map<bool,map<AliasBinary,AliasEnum>> xMapBoolMapAliasBinaryAliasEnumDef
    920: required map<bool,map<AliasBinary,AliasEnum>> xMapBoolMapAliasBinaryAliasEnumReq
    921: optional map<bool,map<AliasBinary,AliasEnum>> xMapBoolMapAliasBinaryAliasEnumOpt
    922: map<bool,map<AliasEnum,AliasUnion>> xMapBoolMapAliasEnumAliasUnionDef
    923: required map<bool,map<AliasEnum,AliasUnion>> xMapBoolMapAliasEnumAliasUnionReq
    924: optional map<bool,map<AliasEnum,AliasUnion>> xMapBoolMapAliasEnumAliasUnionOpt
    925: map<bool,map<AliasUnion,AliasStruct>> xMapBoolMapAliasUnionAliasStructDef
    926: required map<bool,map<AliasUnion,AliasStruct>> xMapBoolMapAliasUnionAliasStructReq
    927: optional map<bool,map<AliasUnion,AliasStruct>> xMapBoolMapAliasUnionAliasStructOpt
    928: map<bool,map<AliasStruct,AliasException>> xMapBoolMapAliasStructAliasExceptionDef
    929: required map<bool,map<AliasStruct,AliasException>> xMapBoolMapAliasStructAliasExceptionReq
    930: optional map<bool,map<AliasStruct,AliasException>> xMapBoolMapAliasStructAliasExceptionOpt
    931: map<bool,map<AliasException,bool>> xMapBoolMapAliasExceptionBoolDef
    932: required map<bool,map<AliasException,bool>> xMapBoolMapAliasExceptionBoolReq
    933: optional map<bool,map<AliasException,bool>> xMapBoolMapAliasExceptionBoolOpt
    934: map<bool,list<bool>> xMapBoolListBoolDef
    935: required map<bool,list<bool>> xMapBoolListBoolReq
    936: optional map<bool,list<bool>> xMapBoolListBoolOpt
}

service SA {
}

service SB extends SA {
    void f0(1: bool r1)
    oneway void f1(1: bool r1, 2: byte r2, 3: i64 r3, 4: string r4, 5: binary r5, 6: Enum r6, 7: Enum r7, 8: Union r8, 9: Struct r9, 10: Complex r10)
    bool f2(1: byte r1)
    bool f3(1: byte r1, 2: i64 r2, 3: string r3, 4: binary r4, 5: Enum r5, 6: Enum r6, 7: Union r7, 8: Struct r8, 9: Complex r9)
    byte f4(1: i64 r1)
    byte f5(1: i64 r1, 2: string r2, 3: binary r3, 4: Enum r4, 5: Enum r5, 6: Union r6, 7: Struct r7, 8: Complex r8)
    i64 f6(1: string r1)
    i64 f7(1: string r1, 2: binary r2, 3: Enum r3, 4: Enum r4, 5: Union r5, 6: Struct r6, 7: Complex r7)
    string f8(1: binary r1)
    string f9(1: binary r1, 2: Enum r2, 3: Enum r3, 4: Union r4, 5: Struct r5, 6: Complex r6)
    binary f10(1: Enum r1)
    binary f11(1: Enum r1, 2: Enum r2, 3: Union r3, 4: Struct r4, 5: Complex r5)
    Enum f12(1: Enum r1)
    Enum f13(1: Enum r1, 2: Union r2, 3: Struct r3, 4: Complex r4)
    Enum f14(1: Union r1)
    Enum f15(1: Union r1, 2: Struct r2, 3: Complex r3)
    Union f16(1: Struct r1)
    Union f17(1: Struct r1, 2: Complex r2)
    Struct f18(1: Complex r1)
}

service SC extends SB {
    void f19(1: bool r1)throws (1: Exception e1)
    oneway void f20(1: bool r1, 2: byte r2, 3: i64 r3, 4: string r4, 5: binary r5, 6: Enum r6, 7: Enum r7, 8: Union r8, 9: Struct r9, 10: Complex r10)
    bool f21(1: byte r1)throws (1: Exception e1)
    bool f22(1: byte r1, 2: i64 r2, 3: string r3, 4: binary r4, 5: Enum r5, 6: Enum r6, 7: Union r7, 8: Struct r8, 9: Complex r9)throws (1: Exception e1)
    byte f23(1: i64 r1)throws (1: Exception e1)
    byte f24(1: i64 r1, 2: string r2, 3: binary r3, 4: Enum r4, 5: Enum r5, 6: Union r6, 7: Struct r7, 8: Complex r8)throws (1: Exception e1)
    i64 f25(1: string r1)throws (1: Exception e1)
    i64 f26(1: string r1, 2: binary r2, 3: Enum r3, 4: Enum r4, 5: Union r5, 6: Struct r6, 7: Complex r7)throws (1: Exception e1)
    string f27(1: binary r1)throws (1: Exception e1)
    string f28(1: binary r1, 2: Enum r2, 3: Enum r3, 4: Union r4, 5: Struct r5, 6: Complex r6)throws (1: Exception e1)
    binary f29(1: Enum r1)throws (1: Exception e1)
    binary f30(1: Enum r1, 2: Enum r2, 3: Union r3, 4: Struct r4, 5: Complex r5)throws (1: Exception e1)
    Enum f31(1: Enum r1)throws (1: Exception e1)
    Enum f32(1: Enum r1, 2: Union r2, 3: Struct r3, 4: Complex r4)throws (1: Exception e1)
    Enum f33(1: Union r1)throws (1: Exception e1)
    Enum f34(1: Union r1, 2: Struct r2, 3: Complex r3)throws (1: Exception e1)
    Union f35(1: Struct r1)throws (1: Exception e1)
    Union f36(1: Struct r1, 2: Complex r2)throws (1: Exception e1)
    Struct f37(1: Complex r1)throws (1: Exception e1)
}

